"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _List = _interopRequireDefault(require("./List"));

var _v = _interopRequireDefault(require("uuid/v1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Wrapper = function Wrapper(_ref) {
  var children = _ref.children;
  return _react.default.createElement("ul", null, children);
}; // @TODO yes, later, we should replace this "data" argument for a better name.
// right now it's just works and i'm tired


var RenderItem = function RenderItem(_ref2) {
  var data = _ref2.data,
      id = _ref2.id;
  // if( typeof(data) === 'string' ){
  return _react.default.createElement("li", {
    key: id
  }, data); // }
  // all other cases. we're assuming that we have an object with {key, value} structure
  // or it'll generate an issue
  // but we actually never covered it well at DefaultList, right now we're passing
  // custom generated id, but we can/should update it later
  // return (
  //   <li key={data.key}>{data.value}</li>
  // )
}; // @TODO right now our key is autogenerated.
// it's maybe not a good idea for a future.
// when we'll have a real id from database we should use them(twice)


var DefaultList = function DefaultList(_ref3) {
  var items = _ref3.items;
  return _react.default.createElement(Wrapper, null, _react.default.createElement(_List.default, {
    items: items
  }, function (data) {
    return _react.default.createElement(RenderItem, {
      data: data,
      key: (0, _v.default)(),
      id: (0, _v.default)()
    });
  }));
};

var _default = DefaultList;
exports.default = _default;